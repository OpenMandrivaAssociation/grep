diff -Naur grep-3.1/configure.ac grep-3.1.tpg/configure.ac
--- grep-3.1/configure.ac	2017-01-01 11:34:33.000000000 +0000
+++ grep-3.1.tpg/configure.ac	2018-01-25 12:29:28.159695324 +0000
@@ -94,6 +94,18 @@
 AC_C_CONST
 gl_INIT
 
+AC_CACHE_CHECK([for gcc 7-compatible __builtin_mul_overflow_p],
+  [utils_cv_builtin_mul_overflow_p],
+  [AC_COMPILE_IFELSE(
+    [AC_LANG_PROGRAM(
+      [[]],
+      [[return __builtin_mul_overflow_p(1, 2, 3);]])],
+    [utils_cv_builtin_mul_overflow_p=yes],
+    [utils_cv_builtin_mul_overflow_p=no])])
+if test $utils_cv_builtin_mul_overflow_p = yes; then
+  AC_DEFINE([HAVE_BUILTIN_MUL_OVERFLOW_P], [1], [Define if your compiler supports __builtin_mul_overflow_p])
+fi
+
 # The test suite needs to know if we have a working perl.
 # FIXME: this is suboptimal.  Ideally, we would be able to call gl_PERL
 # with an ACTION-IF-NOT-FOUND argument ...
diff -Naur grep-3.1/lib/dfa.c grep-3.1.tpg/lib/dfa.c
--- grep-3.1/lib/dfa.c	2017-05-20 00:00:26.000000000 +0000
+++ grep-3.1.tpg/lib/dfa.c	2018-01-25 12:33:15.143464982 +0000
@@ -55,7 +55,7 @@
 #include "localeinfo.h"
 
 #ifndef FALLTHROUGH
-# if __GNUC__ < 7
+# if __GNUC__ < 7 || !__has_attribute(__fallthrough__)
 #  define FALLTHROUGH ((void) 0)
 # else
 #  define FALLTHROUGH __attribute__ ((__fallthrough__))
diff -Naur grep-3.1/lib/intprops.h grep-3.1.tpg/lib/intprops.h
--- grep-3.1/lib/intprops.h	2017-06-10 16:45:36.000000000 +0000
+++ grep-3.1.tpg/lib/intprops.h	2018-01-25 12:30:52.582611039 +0000
@@ -225,14 +225,11 @@
 # define _GL_HAS_BUILTIN_OVERFLOW 0
 #endif
 
-/* True if __builtin_add_overflow_p (A, B, C) works.  */
-#define _GL_HAS_BUILTIN_OVERFLOW_P (7 <= __GNUC__)
-
 /* The _GL*_OVERFLOW macros have the same restrictions as the
    *_RANGE_OVERFLOW macros, except that they do not assume that operands
    (e.g., A and B) have the same type as MIN and MAX.  Instead, they assume
    that the result (e.g., A + B) has that type.  */
-#if _GL_HAS_BUILTIN_OVERFLOW_P
+#ifdef HAVE_BUILTIN_MUL_OVERFLOW_P
 # define _GL_ADD_OVERFLOW(a, b, min, max)                               \
    __builtin_add_overflow_p (a, b, (__typeof__ ((a) + (b))) 0)
 # define _GL_SUBTRACT_OVERFLOW(a, b, min, max)                          \
diff -Naur grep-3.1/lib/xalloc-oversized.h grep-3.1.tpg/lib/xalloc-oversized.h
--- grep-3.1/lib/xalloc-oversized.h	2017-06-25 23:19:26.000000000 +0000
+++ grep-3.1.tpg/lib/xalloc-oversized.h	2018-01-25 12:31:52.058550622 +0000
@@ -41,7 +41,7 @@
    positive and N must be nonnegative.  This is a macro, not a
    function, so that it works correctly even when SIZE_MAX < N.  */
 
-#if 7 <= __GNUC__
+#ifdef HAVE_BUILTIN_MUL_OVERFLOW_P
 # define xalloc_oversized(n, s) \
    __builtin_mul_overflow_p (n, s, (__xalloc_count_type) 1)
 #elif 5 <= __GNUC__ && !defined __ICC && !__STRICT_ANSI__
